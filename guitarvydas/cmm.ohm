cmm {
  main = findMacro+

 findMacro
    = wsnl? experimentalApplySyntactic<Macro>+ -- macro
    | any                                    --default

  Macro
    // mechanism List, ListCell
    = "$datumMessage" Param     -- datumMessage
    | "$datumpComponent" Param     -- datumpComponent
    | "$datumpConnection" Param     -- datumpConnection
    | "$newListCellComponent" Param  -- newListCellComponent
    | "$append" TwoParams  -- append

    // mechanism Component
    | "$newComponent" ThreeParams -- newComponent
    | "$isReady" Param -- isReady
    | "$popInput" Param -- popInput
    | "$callReaction" TwoParams    -- callReaction
    | "$hasInputs" Param        -- hasInputs
    | "$hasOutputs" Param        -- hasOutputs
    | "$enqueueMessage" TwoParams  -- enqueueMessage
    | "$enqueueOutput" TwoParams  -- enqueueOutput
    | "$clearOutputs" Param -- clearOutputs

    // Component List iterator
    | "$beginWalkingComponentList" Param -- beginWalkingComponentList
    | "$endWalkingComponentList" Param -- endWalkingComponentList
    | "$walkMoreComponents" Param -- walkingMoreComponents
    | "$advance" Param -- advance
    | "$nextComponentInList" Param -- nextComponentInList

    // Component's output List iterator
    | "$beginWalkingOutputsAsSent" TwoParams -- beginWalkingOutputsAsSent
    | "$endWalkingOutputsAsSent" TwoParams -- endWalkingOutputsAsSent
    | "$walkMoreOutputs" Param -- walkMoreOutputs
    | "$nextOutput" Param -- nextOutput
    | "$advanceOutputsAndGC" Param -- advanceOutputs

    // mechanism ConnectionTable
    | "$connectedTo" Param -- connectedTo
    | "$connect" TwoParams -- connect


    // mechanism Counter
    | "$initializeCounter" -- initializeCounter
    | "$decCounter" -- decCounter
    | "$counterIsGreaterThanZero" -- counterIsGreaterThanZero


    // mechanism Kernel
    | "$withLock" block -- withLock
    | "$sendc" TwoParams -- sendc
    | "$panic" Param    -- panic
    | "$quit"           -- quit
    | "$start"           -- start
    | "$kickstart" TwoParams -- kickstart
    | "$anyComponentHasInputs" -- anyComponentHasInputs


Param = "(" Expr ")"
TwoParams = "(" Expr "," Expr ")"
ThreeParams = "(" Expr "," Expr "," Expr")"
Expr
  = "(" Expr ")" Expr -- cast
  | "(" Expr ")" -- nested
  | Expr "(" Arglist? ")" -- funccall
  | atom -- atom
  | ~"," ~"(" ~")" any -- flat

Arglist = ArgComma+
ArgComma = Expr ","

block = "{" block* "}" -- nested
      | notBrace       -- raw

notBrace = ~"{" ~"}" any

space += comment
comment = "//" notNL* nl
nl = "\n"
notNL = ~nl any

dollar = "$"

ws = " " | "\t"

wsnl = ws | nl

atom = atomchar+
atomchar = ~"$" ~"," ~"(" ~")" any 


}

